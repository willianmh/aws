{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "AWS CloudFormation template for deploying master + compute clusters on AWS.  **WARNING** This template creates AWS resources. You will be billed for the AWS resources used if you create a stack from this template.",
  "Parameters": {
    "KeyName": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "MinLength": "1"
    },
    "MasterSubnetId": {
      "Description": "Name of the existing Subnet where Resources will be launched into",
      "Type": "AWS::EC2::Subnet::Id",
      "MinLength": "1"
    },
    "SpotPrice": {
      "Description": "The bid per spot instance for c4.8xlarge compute instances.  Defaults to 100% of on demand.",
      "Default": "1.763",
      "Type": "String"
    }
  },
  "Conditions": {
    "UseSpotInstances": {
      "Fn::Equals": [
        {
          "Fn::FindInMap": [
            "MyConfig",
            "ClusterType",
            "Default"
          ]
        },
        "spot"
      ]
    },
    "UseMasterSubnetForCompute": {
      "Fn::And": [
        {
          "Fn::Equals": [
            {
              "Fn::FindInMap": [
                "MyConfig",
                "ComputeSubnetId",
                "Default"
              ]
            },
            "NONE"
          ]
        },
        {
          "Fn::Equals": [
            {
              "Fn::FindInMap": [
                "MyConfig",
                "ComputeSubnetCidr",
                "Default"
              ]
            },
            "NONE"
          ]
        }
      ]
    },
    "UseEBSSnapshot": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Fn::FindInMap": [
                "AWSRegion2Snapshot",
                {
                  "Ref": "AWS::Region"
                },
                "Default"
              ]
            },
            "NONE"
          ]
        }
      ]
    },
    "UseCustomAMI": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Fn::FindInMap": [
                "MyConfig",
                "CustomAMI",
                "Default"
              ]
            },
            "NONE"
          ]
        }
      ]
    },
    "MaintainInitialASGSize": {
      "Fn::Equals": [
        {
          "Fn::FindInMap": [
            "MyConfig",
            "MaintainInitialSize",
            "Default"
          ]
        },
        "true"
      ]
    },
    "MasterPublicIp": {
      "Fn::Equals": [
        {
          "Fn::FindInMap": [
            "MyConfig",
            "UsePublicIps",
            "Default"
          ]
        },
        "true"
      ]
    },
    "ComputePublicIps": {
      "Fn::And": [
        {
          "Fn::Equals": [
            {
              "Fn::FindInMap": [
                "MyConfig",
                "UsePublicIps",
                "Default"
              ]
            },
            "true"
          ]
        },
        {
          "Condition": "UseMasterSubnetForCompute"
        }
      ]
    },
    "UseEBSPIOPS": {
      "Fn::Equals": [
        {
          "Fn::FindInMap": [
            "MyConfig",
            "VolumeType",
            "Default"
          ]
        },
        "io1"
      ]
    },
    "UseS3ReadPolicy": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Fn::FindInMap": [
                "MyConfig",
                "S3ReadResource",
                "Default"
              ]
            },
            "NONE"
          ]
        }
      ]
    },
    "UsePlacementGroup": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Fn::FindInMap": [
                "MyConfig",
                "PlacementGroup",
                "Default"
              ]
            },
            "NONE"
          ]
        }
      ]
    },
    "UseClusterPlacement": {
      "Fn::And": [
        {
          "Fn::Equals": [
            {
              "Fn::FindInMap": [
                "MyConfig",
                "Placement",
                "Default"
              ]
            },
            "cluster"
          ]
        },
        {
          "Condition": "UsePlacementGroup"
        }
      ]
    },
    "UseEBSEncryption": {
      "Fn::Equals": [
        {
          "Fn::FindInMap": [
            "MyConfig",
            "EBSEncryption",
            "Default"
          ]
        },
        "true"
      ]
    },
    "UseS3ReadWritePolicy": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Fn::FindInMap": [
                "MyConfig",
                "S3ReadWriteResource",
                "Default"
              ]
            },
            "NONE"
          ]
        }
      ]
    },
    "CloudWatchLogs": {
      "Fn::And": [
        {
          "Fn::Not": [
            {
              "Fn::Equals": [
                {
                  "Fn::FindInMap": [
                    "MyConfig",
                    "CWLRegion",
                    "Default"
                  ]
                },
                "NONE"
              ]
            }
          ]
        },
        {
          "Fn::Not": [
            {
              "Fn::Equals": [
                {
                  "Fn::FindInMap": [
                    "MyConfig",
                    "CWLLogGroup",
                    "Default"
                  ]
                },
                "NONE"
              ]
            }
          ]
        }
      ]
    },
    "AddAdditionalSG": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Fn::FindInMap": [
                "MyConfig",
                "AdditionalSG",
                "Default"
              ]
            },
            "NONE"
          ]
        }
      ]
    },
    "UseEBSKMSKey": {
      "Fn::And": [
        {
          "Fn::Not": [
            {
              "Fn::Equals": [
                {
                  "Fn::FindInMap": [
                    "MyConfig",
                    "EBSKMSKeyId",
                    "Default"
                  ]
                },
                "NONE"
              ]
            }
          ]
        },
        {
          "Condition": "UseEBSEncryption"
        }
      ]
    },
    "UseEphemeralKMSKey": {
      "Fn::And": [
        {
          "Fn::Not": [
            {
              "Fn::Equals": [
                {
                  "Fn::FindInMap": [
                    "MyConfig",
                    "EphemeralKMSKeyId",
                    "Default"
                  ]
                },
                "NONE"
              ]
            }
          ]
        },
        {
          "Fn::Equals": [
            {
              "Fn::FindInMap": [
                "MyConfig",
                "EncryptedEphemeral",
                "Default"
              ]
            },
            "true"
          ]
        }
      ]
    },
    "UseDedicatedTenancy": {
      "Fn::Equals": [
        {
          "Fn::FindInMap": [
            "MyConfig",
            "Tenancy",
            "Default"
          ]
        },
        "dedicated"
      ]
    }
  },
  "Mappings": {
    "MyConfig": {
      "MasterInstanceType": {
        "Default": "m4.large"
      },
      "ComputeInstanceType": {
        "Default": "c4.8xlarge"
      },
      "InitialQueueSize": {
        "Default": "2"
      },
      "MaxQueueSize": {
        "Default": "2"
      },
      "ComputeSubnetId": {
        "Default": "NONE"
      },
      "ComputeSubnetCidr": {
        "Default": "NONE"
      },
      "ScalingThreshold": {
        "Default": "4"
      },
      "ScalingEvaluationPeriods": {
        "Default": "2"
      },
      "ScalingPeriod": {
        "Default": "60"
      },
      "ClusterType": {
        "Default": "spot"
      },
      "ProxyServer": {
        "Default": "NONE"
      },
      "VolumeSize": {
        "Default": "20"
      },
      "VolumeType": {
        "Default": "gp2"
      },
      "CustomAMI": {
        "Default": "NONE"
      },
      "SSHFrom": {
        "Default": "0.0.0.0/0"
      },
      "MaintainInitialSize": {
        "Default": "false"
      },
      "UsePublicIps": {
        "Default": "true"
      },
      "VolumeIOPS": {
        "Default": "100"
      },
      "PreInstallScript": {
        "Default": "NONE"
      },
      "PostInstallScript": {
        "Default": "https://s3-us-west-2.amazonaws.com/cfncluster-public-scripts/openfoamtutorial.sh"
      },
      "ComputeWaitConditionCount": {
        "Default": "2"
      },
      "S3ReadResource": {
        "Default": "NONE"
      },
      "S3ReadWriteResource": {
        "Default": "NONE"
      },
      "Placement": {
        "Default": "cluster"
      },
      "PlacementGroup": {
        "Default": "NONE"
      },
      "EncryptedEphemeral": {
        "Default": "false"
      },
      "PreInstallArgs": {
        "Default": "NONE"
      },
      "PostInstallArgs": {
        "Default": "NONE"
      },
      "EBSEncryption": {
        "Default": "false"
      },
      "EphemeralDir": {
        "Default": "/scratch"
      },
      "BaseOS": {
        "Default": "centos6"
      },
      "ScalingThreshold2": {
        "Default": "200"
      },
      "ScalingCooldown": {
        "Default": "120"
      },
      "ScalingAdjustment": {
        "Default": "2"
      },
      "ScalingAdjustment2": {
        "Default": "20"
      },
      "Scheduler": {
        "Default": "sge"
      },
      "SharedDir": {
        "Default": "/shared"
      },
      "CLITemplate": {
        "Default": "Default"
      },
      "AdditionalSG": {
        "Default": "NONE"
      },
      "CWLRegion": {
        "Default": "NONE"
      },
      "CWLLogGroup": {
        "Default": "NONE"
      },
      "Tenancy": {
        "Default": "default"
      },
      "EBSKMSKeyId": {
        "Default": "NONE"
      },
      "EphemeralKMSKeyId": {
        "Default": "NONE"
      },
      "ClusterReadyScript": {
        "Default": "NONE"
      }
    },
    "AWSInstanceType2Capabilites": {
      "cc2.8xlarge": {
        "Arch": "64HVM",
        "EBSOpt": "False"
      },
      "cr1.8xlarge": {
        "Arch": "64HVM",
        "EBSOpt": "False"
      },
      "g2.2xlarge": {
        "Arch": "64HVM",
        "EBSOpt": "True"
      },
      "m3.medium": {
        "Arch": "64HVM",
        "EBSOpt": "False"
      },
      "m3.large": {
        "Arch": "64HVM",
        "EBSOpt": "False"
      },
      "m3.xlarge": {
        "Arch": "64HVM",
        "EBSOpt": "True"
      },
      "m3.2xlarge": {
        "Arch": "64HVM",
        "EBSOpt": "True"
      },
      "c3.8xlarge": {
        "Arch": "64HVM",
        "EBSOpt": "False"
      },
      "c3.4xlarge": {
        "Arch": "64HVM",
        "EBSOpt": "True"
      },
      "c3.2xlarge": {
        "Arch": "64HVM",
        "EBSOpt": "True"
      },
      "c3.xlarge": {
        "Arch": "64HVM",
        "EBSOpt": "True"
      },
      "c3.large": {
        "Arch": "64HVM",
        "EBSOpt": "False"
      },
      "c4.8xlarge": {
        "Arch": "64HVM",
        "EBSOpt": "True"
      },
      "c4.4xlarge": {
        "Arch": "64HVM",
        "EBSOpt": "True"
      },
      "c4.2xlarge": {
        "Arch": "64HVM",
        "EBSOpt": "True"
      },
      "c4.xlarge": {
        "Arch": "64HVM",
        "EBSOpt": "True"
      },
      "c4.large": {
        "Arch": "64HVM",
        "EBSOpt": "True"
      },
      "r3.8xlarge": {
        "Arch": "64HVM",
        "EBSOpt": "False"
      },
      "r3.4xlarge": {
        "Arch": "64HVM",
        "EBSOpt": "True"
      },
      "r3.2xlarge": {
        "Arch": "64HVM",
        "EBSOpt": "True"
      },
      "r3.xlarge": {
        "Arch": "64HVM",
        "EBSOpt": "True"
      },
      "r3.large": {
        "Arch": "64HVM",
        "EBSOpt": "False"
      },
      "i2.8xlarge": {
        "Arch": "64HVM",
        "EBSOpt": "False"
      },
      "i2.4xlarge": {
        "Arch": "64HVM",
        "EBSOpt": "True"
      },
      "i2.2xlarge": {
        "Arch": "64HVM",
        "EBSOpt": "True"
      },
      "i2.xlarge": {
        "Arch": "64HVM",
        "EBSOpt": "True"
      },
      "i2.large": {
        "Arch": "64HVM",
        "EBSOpt": "False"
      },
      "cg1.4xlarge": {
        "Arch": "64HVM",
        "EBSOpt": "False"
      },
      "t2.micro": {
        "Arch": "64HVM",
        "EBSOpt": "False"
      },
      "t2.small": {
        "Arch": "64HVM",
        "EBSOpt": "False"
      },
      "t2.medium": {
        "Arch": "64HVM",
        "EBSOpt": "False"
      },
      "t2.large": {
        "Arch": "64HVM",
        "EBSOpt": "False"
      },
      "d2.8xlarge": {
        "Arch": "64HVM",
        "EBSOpt": "True"
      },
      "d2.4xlarge": {
        "Arch": "64HVM",
        "EBSOpt": "True"
      },
      "d2.2xlarge": {
        "Arch": "64HVM",
        "EBSOpt": "True"
      },
      "d2.xlarge": {
        "Arch": "64HVM",
        "EBSOpt": "True"
      },
      "m4.10xlarge": {
        "Arch": "64HVM",
        "EBSOpt": "True"
      },
      "m4.4xlarge": {
        "Arch": "64HVM",
        "EBSOpt": "True"
      },
      "m4.2xlarge": {
        "Arch": "64HVM",
        "EBSOpt": "True"
      },
      "m4.xlarge": {
        "Arch": "64HVM",
        "EBSOpt": "True"
      },
      "m4.large": {
        "Arch": "64HVM",
        "EBSOpt": "True"
      }
    },
    "AWSRegion2Snapshot": {
      "us-east-1": {
        "Default": "snap-450332d2"
      },
      "us-west-2": {
        "Default": "snap-d7efa994"
      }
    },
    "AWSRegionOS2AMI": {
      "us-west-2": {
        "centos6": "ami-b7bb8387"
      },
      "eu-central-1": {
        "centos6": "ami-9886bf85"
      },
      "sa-east-1": {
        "centos6": "ami-853fbf98"
      },
      "ap-northeast-1": {
        "centos6": "ami-10aa7310"
      },
      "eu-west-1": {
        "centos6": "ami-5d6d132a"
      },
      "us-east-1": {
        "centos6": "ami-77fe0b1c"
      },
      "us-west-1": {
        "centos6": "ami-036f8547"
      },
      "ap-southeast-2": {
        "centos6": "ami-8d6b10b7"
      },
      "ap-southeast-1": {
        "centos6": "ami-b2d7ede0"
      },
      "us-gov-west-1": {
        "centos6": "ami-3d82e21e"
      }
    },
    "ClusterUser": {
      "centos6": {
        "User": "ec2-user"
      },
      "alinux": {
        "User": "ec2-user"
      },
      "ubuntu": {
        "User": "ubuntu"
      }
    },
    "AWSRegion2Capabilites": {
      "eu-west-1": {
        "arn": "aws"
      },
      "us-east-1": {
        "arn": "aws"
      },
      "ap-northeast-1": {
        "arn": "aws"
      },
      "us-west-2": {
        "arn": "aws"
      },
      "sa-east-1": {
        "arn": "aws"
      },
      "us-west-1": {
        "arn": "aws"
      },
      "ap-southeast-1": {
        "arn": "aws"
      },
      "ap-southeast-2": {
        "arn": "aws"
      },
      "eu-central-1": {
        "arn": "aws"
      },
      "us-gov-west-1": {
        "arn": "aws-us-gov"
      }
    }
  },
  "Resources": {
    "SubnetInfo": {
      "Type": "Custom::SubnetInfo",
      "DependsOn": [
        "RootRole"
      ],
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "SubnetInfoFunction",
            "Arn"
          ]
        },
        "Region": {
          "Ref": "AWS::Region"
        },
        "MasterSubnetId": {
          "Ref": "MasterSubnetId"
        }
      }
    },
    "SubnetInfoFunction": {
      "Type": "AWS::Lambda::Function",
      "DependsOn": [
        "RootRole"
      ],
      "Properties": {
        "Code": {
          "ZipFile": "function sendResponse(e,o,s,n){var r=JSON.stringify({Status:s,Reason:\"See the details in CloudWatch Log Stream: \"+o.logStreamName,PhysicalResourceId:o.logStreamName,StackId:e.StackId,RequestId:e.RequestId,LogicalResourceId:e.LogicalResourceId,Data:n});console.log(\"RESPONSE BODY:\\n\",r);var t=require(\"https\"),a=require(\"url\"),i=a.parse(e.ResponseURL),l={hostname:i.hostname,port:443,path:i.path,method:\"PUT\",headers:{\"content-type\":\"\",\"content-length\":r.length}};console.log(\"SENDING RESPONSE...\\n\");var d=t.request(l,function(e){console.log(\"STATUS: \"+e.statusCode),console.log(\"HEADERS: \"+JSON.stringify(e.headers)),o.done()});d.on(\"error\",function(e){console.log(\"sendResponse Error:\"+e),o.done()}),d.write(r),d.end()}var aws=require(\"aws-sdk\");exports.handler=function(e,o){if(console.log(\"REQUEST RECEIVED:\\n\"+JSON.stringify(e)),\"Delete\"==e.RequestType)return void sendResponse(e,o,\"SUCCESS\");var s=\"FAILED\",n={},r=new aws.EC2({region:e.ResourceProperties.Region});r.describeSubnets({SubnetIds:[e.ResourceProperties.MasterSubnetId]},function(r,t){if(r)n={Error:\"describeSubnets call failed\"},console.log(n.Error+\":\\n\",r);else{var a=t.Subnets;s=\"SUCCESS\",n.SubnetID=a[0].subnetId,n.VpcId=a[0].VpcId,n.CidrBlock=a[0].CidrBlock,n.AvailabilityZone=a[0].AvailabilityZone}sendResponse(e,o,s,n)})};"
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "LambdaExecutionRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs4.3",
        "Timeout": "30"
      }
    },
    "LambdaExecutionRole": {
      "Type": "AWS::IAM::Role",
      "DependsOn": [
        "RootRole"
      ],
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "root",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "arn:aws:logs:*:*:*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "ec2:DescribeSubnets"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "SQS": {
      "Type": "AWS::SQS::Queue",
      "DependsOn": [
        "RootRole"
      ],
      "Properties": {}
    },
    "SQSPolicy": {
      "Type": "AWS::SQS::QueuePolicy",
      "DependsOn": [
        "RootRole"
      ],
      "Properties": {
        "PolicyDocument": {
          "Id": "MyQueuePolicy",
          "Statement": [
            {
              "Sid": "Allow-SendMessage-From-AS-SNS-Topic",
              "Effect": "Allow",
              "Principal": {
                "AWS": "*"
              },
              "Action": [
                "sqs:SendMessage"
              ],
              "Resource": "*",
              "Condition": {
                "ArnEquals": {
                  "aws:SourceArn": {
                    "Ref": "SNS"
                  }
                }
              }
            }
          ]
        },
        "Queues": [
          {
            "Ref": "SQS"
          }
        ]
      }
    },
    "SNS": {
      "Type": "AWS::SNS::Topic",
      "DependsOn": [
        "RootRole"
      ],
      "Properties": {
        "Subscription": [
          {
            "Endpoint": {
              "Fn::GetAtt": [
                "SQS",
                "Arn"
              ]
            },
            "Protocol": "sqs"
          }
        ]
      }
    },
    "DynamoDBTable": {
      "Type": "AWS::DynamoDB::Table",
      "DependsOn": [
        "RootRole"
      ],
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "instanceId",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "instanceId",
            "KeyType": "HASH"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": "5",
          "WriteCapacityUnits": "5"
        }
      }
    },
    "RootRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "ManagedPolicyArns": ["arn:aws:iam::aws:policy/AdministratorAccess"]
      }
    },
    "RootInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "DependsOn": [
        "RootRole"
      ],
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "RootRole"
          }
        ]
      }
    },
    "CfnClusterPolicies": {
      "Type": "AWS::IAM::Policy",
      "DependsOn": [
        "RootRole"
      ],
      "Properties": {
        "PolicyName": "cfncluster",
        "PolicyDocument": {
          "Statement": [
            {
              "Sid": "EC2",
              "Action": [
                "ec2:AttachVolume",
                "ec2:DescribeInstanceAttribute",
                "ec2:DescribeInstanceStatus",
                "ec2:DescribeInstances"
              ],
              "Effect": "Allow",
              "Resource": [
                "*"
              ]
            },
            {
              "Sid": "DynamoDBList",
              "Action": [
                "dynamodb:ListTables"
              ],
              "Effect": "Allow",
              "Resource": [
                "*"
              ]
            },
            {
              "Sid": "SQSQueue",
              "Action": [
                "sqs:SendMessage",
                "sqs:ReceiveMessage",
                "sqs:ChangeMessageVisibility",
                "sqs:DeleteMessage",
                "sqs:GetQueueUrl"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "SQS",
                    "Arn"
                  ]
                }
              ]
            },
            {
              "Sid": "Autoscaling",
              "Action": [
                "autoscaling:DescribeAutoScalingGroups",
                "autoscaling:TerminateInstanceInAutoScalingGroup",
                "autoscaling:SetDesiredCapacity"
              ],
              "Effect": "Allow",
              "Resource": [
                "*"
              ]
            },
            {
              "Sid": "CloudWatch",
              "Action": [
                "cloudwatch:PutMetricData"
              ],
              "Effect": "Allow",
              "Resource": [
                "*"
              ]
            },
            {
              "Sid": "DynamoDBTable",
              "Action": [
                "dynamodb:PutItem",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Fn::FindInMap": [
                          "AWSRegion2Capabilites",
                          {
                            "Ref": "AWS::Region"
                          },
                          "arn"
                        ]
                      },
                      ":dynamodb:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":table/",
                      {
                        "Ref": "DynamoDBTable"
                      }
                    ]
                  ]
                }
              ]
            },
            {
              "Sid": "SQSList",
              "Action": [
                "sqs:ListQueues"
              ],
              "Effect": "Allow",
              "Resource": [
                "*"
              ]
            },
            {
              "Sid": "CloudWatchLogs",
              "Action": [
                "logs:*"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Fn::FindInMap": [
                          "AWSRegion2Capabilites",
                          {
                            "Ref": "AWS::Region"
                          },
                          "arn"
                        ]
                      },
                      ":logs:*:*:*"
                    ]
                  ]
                }
              ]
            }
          ]
        },
        "Roles": [
          {
            "Ref": "RootRole"
          }
        ]
      }
    },
    "S3ReadRolePolicies": {
      "Type": "AWS::IAM::Policy",
      "DependsOn": [
        "RootRole"
      ],
      "Properties": {
        "PolicyName": "S3Read",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "S3Read",
              "Effect": "Allow",
              "Action": [
                "s3:Get*",
                "s3:List*"
              ],
              "Resource": [
                {
                  "Fn::FindInMap": [
                    "MyConfig",
                    "S3ReadResource",
                    "Default"
                  ]
                }
              ]
            }
          ]
        },
        "Roles": [
          {
            "Ref": "RootRole"
          }
        ]
      },
      "Condition": "UseS3ReadPolicy"
    },
    "S3ReadWriteRolePolicies": {
      "Type": "AWS::IAM::Policy",
      "DependsOn": [
        "RootRole"
      ],
      "Properties": {
        "PolicyName": "S3ReadWrite",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "S3ReadWrite",
              "Effect": "Allow",
              "Action": [
                "s3:*"
              ],
              "Resource": [
                {
                  "Fn::FindInMap": [
                    "MyConfig",
                    "S3ReadWriteResource",
                    "Default"
                  ]
                }
              ]
            }
          ]
        },
        "Roles": [
          {
            "Ref": "RootRole"
          }
        ]
      },
      "Condition": "UseS3ReadWritePolicy"
    },
    "MasterEIP": {
      "Type": "AWS::EC2::EIP",
      "DependsOn": [
        "RootRole"
      ],
      "Properties": {
        "Domain": "vpc"
      },
      "Condition": "MasterPublicIp"
    },
    "MasterServer": {
      "Type": "AWS::EC2::Instance",
      "DependsOn": [
        "RootRole"
      ],
      "Properties": {
        "InstanceType": {
          "Fn::FindInMap": [
            "MyConfig",
            "MasterInstanceType",
            "Default"
          ]
        },
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvdba",
            "VirtualName": "ephemeral0"
          },
          {
            "DeviceName": "/dev/xvdbb",
            "VirtualName": "ephemeral1"
          },
          {
            "DeviceName": "/dev/xvdbc",
            "VirtualName": "ephemeral2"
          },
          {
            "DeviceName": "/dev/xvdbd",
            "VirtualName": "ephemeral3"
          },
          {
            "DeviceName": "/dev/xvdbe",
            "VirtualName": "ephemeral4"
          },
          {
            "DeviceName": "/dev/xvdbf",
            "VirtualName": "ephemeral5"
          },
          {
            "DeviceName": "/dev/xvdbg",
            "VirtualName": "ephemeral6"
          },
          {
            "DeviceName": "/dev/xvdbh",
            "VirtualName": "ephemeral7"
          },
          {
            "DeviceName": "/dev/xvdbi",
            "VirtualName": "ephemeral8"
          },
          {
            "DeviceName": "/dev/xvdbj",
            "VirtualName": "ephemeral9"
          },
          {
            "DeviceName": "/dev/xvdbk",
            "VirtualName": "ephemeral10"
          },
          {
            "DeviceName": "/dev/xvdbl",
            "VirtualName": "ephemeral11"
          },
          {
            "DeviceName": "/dev/xvdbm",
            "VirtualName": "ephemeral12"
          },
          {
            "DeviceName": "/dev/xvdbn",
            "VirtualName": "ephemeral13"
          },
          {
            "DeviceName": "/dev/xvdbo",
            "VirtualName": "ephemeral14"
          },
          {
            "DeviceName": "/dev/xvdbp",
            "VirtualName": "ephemeral15"
          },
          {
            "DeviceName": "/dev/xvdbq",
            "VirtualName": "ephemeral16"
          },
          {
            "DeviceName": "/dev/xvdbr",
            "VirtualName": "ephemeral17"
          },
          {
            "DeviceName": "/dev/xvdbs",
            "VirtualName": "ephemeral18"
          },
          {
            "DeviceName": "/dev/xvdbt",
            "VirtualName": "ephemeral19"
          },
          {
            "DeviceName": "/dev/xvdbu",
            "VirtualName": "ephemeral20"
          },
          {
            "DeviceName": "/dev/xvdbv",
            "VirtualName": "ephemeral21"
          },
          {
            "DeviceName": "/dev/xvdbw",
            "VirtualName": "ephemeral22"
          },
          {
            "DeviceName": "/dev/xvdbx",
            "VirtualName": "ephemeral23"
          }
        ],
        "KeyName": {
          "Ref": "KeyName"
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Name",
            "Value": "Master"
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash\n\n",
                "function error_exit\n",
                "{\n",
                "  cfn-signal ${proxy_args} --exit-code=1 --reason=\"$1\" --stack=",
                {
                  "Ref": "AWS::StackName"
                },
                " --resource=MasterServer --region=",
                {
                  "Ref": "AWS::Region"
                },
                "\n",
                "  exit 1\n",
                "}\n",
                "proxy=",
                {
                  "Fn::FindInMap": [
                    "MyConfig",
                    "ProxyServer",
                    "Default"
                  ]
                },
                "\n",
                "if [ \"$proxy\" != \"NONE\" ]; then\n",
                "  proxy_args=\"--http-proxy=${proxy} --https-proxy=${proxy}\"\n",
                "  proxy_host=$(echo \"$proxy\" | awk -F/ '{print $3}' | cut -d: -f1)\n",
                "  proxy_port=$(echo \"$proxy\" | awk -F/ '{print $3}' | cut -d: -f2)\n",
                "  echo -e \"[Boto]\nproxy = ${proxy_host}\nproxy_port = ${proxy_port}\n\" >/etc/boto.cfg\n",
                "else\n",
                "  proxy_args=\"\"\n",
                "fi\n",
                "cfn-init ${proxy_args} -s ",
                {
                  "Ref": "AWS::StackName"
                },
                " -v -c default -r MasterServer --region ",
                {
                  "Ref": "AWS::Region"
                },
                " || error_exit 'Failed to run cfn-init. If --norollback was specified, check /var/log/cfn-init.log and /var/log/cfncluster.log.'\n",
                "cfn_cwl=",
                {
                  "Fn::If": [
                    "CloudWatchLogs",
                    "true",
                    "false"
                  ]
                },
                "\n",
                "if [ \"$cfn_cwl\" == \"true\" ]; then\n",
                "# Setup CloudWatch Logs agent\n",
                "python /root/awslogs-agent-setup.py -n -r ",
                {
                  "Fn::FindInMap": [
                    "MyConfig",
                    "CWLRegion",
                    "Default"
                  ]
                },
                " -c /tmp/cwlogs/cfn-logs.conf || error_exit 'Failed to run CloudWatch Logs agent setup'\n",
                "fi\n",
                "cfn-signal ${proxy_args} --exit-code=0 --reason=\"MasterServer setup complete\" --stack=",
                {
                  "Ref": "AWS::StackName"
                },
                " --resource=MasterServer --region=",
                {
                  "Ref": "AWS::Region"
                },
                "\n",
                "# End of file\n"
              ]
            ]
          }
        },
        "NetworkInterfaces": [
          {
            "NetworkInterfaceId": {
              "Ref": "MasterENI"
            },
            "DeviceIndex": "0"
          }
        ],
        "ImageId": {
          "Fn::If": [
            "UseCustomAMI",
            {
              "Fn::FindInMap": [
                "MyConfig",
                "CustomAMI",
                "Default"
              ]
            },
            {
              "Fn::FindInMap": [
                "AWSRegionOS2AMI",
                {
                  "Ref": "AWS::Region"
                },
                {
                  "Fn::FindInMap": [
                    "MyConfig",
                    "BaseOS",
                    "Default"
                  ]
                }
              ]
            }
          ]
        },
        "EbsOptimized": {
          "Fn::FindInMap": [
            "AWSInstanceType2Capabilites",
            {
              "Fn::FindInMap": [
                "MyConfig",
                "MasterInstanceType",
                "Default"
              ]
            },
            "EBSOpt"
          ]
        },
        "IamInstanceProfile": {
          "Ref": "RootInstanceProfile"
        },
        "PlacementGroupName": {
          "Fn::If": [
            "UseClusterPlacement",
            {
              "Fn::FindInMap": [
                "MyConfig",
                "PlacementGroup",
                "Default"
              ]
            },
            {
              "Ref": "AWS::NoValue"
            }
          ]
        },
        "Tenancy": {
          "Fn::FindInMap": [
            "MyConfig",
            "Tenancy",
            "Default"
          ]
        }
      },
      "Metadata": {
        "Comment": "cfncluster Master server",
        "AWS::CloudFormation::Init": {
          "configSets": {
            "default": [
              "deployConfigFiles",
              "runBootAsMaster"
            ]
          },
          "deployConfigFiles": {
            "files": {
              "/tmp/cwlogs/cfn-logs.conf": {
                "content": {
                  "Fn::If": [
                    "CloudWatchLogs",
                    {
                      "Fn::Join": [
                        "",
                        [
                          "[general]\n",
                          "state_file= /var/awslogs/agent-state\n",
                          "[/var/log/cloud-init.log]\n",
                          "file = /var/log/cloud-init.log\n",
                          "log_group_name = ",
                          {
                            "Fn::FindInMap": [
                              "MyConfig",
                              "CWLLogGroup",
                              "Default"
                            ]
                          },
                          "\n",
                          "log_stream_name = {instance_id}/cloud-init.log\n",
                          "datetime_format = %d/%b/%Y:%H:%M:%S\n",
                          "[/var/log/cloud-init-output.log]\n",
                          "file = /var/log/cloud-init-output.log\n",
                          "log_group_name = ",
                          {
                            "Fn::FindInMap": [
                              "MyConfig",
                              "CWLLogGroup",
                              "Default"
                            ]
                          },
                          "\n",
                          "log_stream_name = {instance_id}/cloud-init-output.log\n",
                          "datetime_format = %d/%b/%Y:%H:%M:%S\n",
                          "[/var/log/cfn-init.log]\n",
                          "file = /var/log/cfn-init.log\n",
                          "log_group_name = ",
                          {
                            "Fn::FindInMap": [
                              "MyConfig",
                              "CWLLogGroup",
                              "Default"
                            ]
                          },
                          "\n",
                          "log_stream_name = {instance_id}/cfn-init.log\n",
                          "datetime_format = %d/%b/%Y:%H:%M:%S\n",
                          "[/var/log/cfn-wire.log]\n",
                          "file = /var/log/cfn-wire.log\n",
                          "log_group_name = ",
                          {
                            "Fn::FindInMap": [
                              "MyConfig",
                              "CWLLogGroup",
                              "Default"
                            ]
                          },
                          "\n",
                          "log_stream_name = {instance_id}/cfn-wire.log\n",
                          "datetime_format = %d/%b/%Y:%H:%M:%S\n"
                        ]
                      ]
                    },
                    "\n"
                  ]
                },
                "mode": "000444",
                "owner": "root",
                "group": "root"
              },
              "/opt/cfncluster/cfnconfig": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "stack_name=",
                      {
                        "Ref": "AWS::StackName"
                      },
                      "\n",
                      "cfn_preinstall=",
                      {
                        "Fn::FindInMap": [
                          "MyConfig",
                          "PreInstallScript",
                          "Default"
                        ]
                      },
                      "\n",
                      "cfn_preinstall_args=\"",
                      {
                        "Fn::FindInMap": [
                          "MyConfig",
                          "PreInstallArgs",
                          "Default"
                        ]
                      },
                      "\"\n",
                      "cfn_postinstall=",
                      {
                        "Fn::FindInMap": [
                          "MyConfig",
                          "PostInstallScript",
                          "Default"
                        ]
                      },
                      "\n",
                      "cfn_postinstall_args=\"",
                      {
                        "Fn::FindInMap": [
                          "MyConfig",
                          "PostInstallArgs",
                          "Default"
                        ]
                      },
                      "\"\n",
                      "cfn_region=",
                      {
                        "Ref": "AWS::Region"
                      },
                      "\n",
                      "cfn_volume=",
                      {
                        "Ref": "SharedVolume"
                      },
                      "\n",
                      "cfn_scheduler=",
                      {
                        "Fn::FindInMap": [
                          "MyConfig",
                          "Scheduler",
                          "Default"
                        ]
                      },
                      "\n",
                      "cfn_encrypted_ephemeral=",
                      {
                        "Fn::FindInMap": [
                          "MyConfig",
                          "EncryptedEphemeral",
                          "Default"
                        ]
                      },
                      "\n",
                      "cfn_ephemeral_dir=",
                      {
                        "Fn::FindInMap": [
                          "MyConfig",
                          "EphemeralDir",
                          "Default"
                        ]
                      },
                      "\n",
                      "cfn_shared_dir=",
                      {
                        "Fn::FindInMap": [
                          "MyConfig",
                          "SharedDir",
                          "Default"
                        ]
                      },
                      "\n",
                      "cfn_proxy=",
                      {
                        "Fn::FindInMap": [
                          "MyConfig",
                          "ProxyServer",
                          "Default"
                        ]
                      },
                      "\n",
                      "cfn_node_type=MasterServer\n",
                      "cfn_cluster_user=",
                      {
                        "Fn::FindInMap": [
                          "ClusterUser",
                          {
                            "Fn::FindInMap": [
                              "MyConfig",
                              "BaseOS",
                              "Default"
                            ]
                          },
                          "User"
                        ]
                      },
                      "\n"
                    ]
                  ]
                },
                "mode": "000644",
                "owner": "root",
                "group": "root"
              },
              "/etc/sqswatcher.cfg": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[sqswatcher]\n",
                      "region = ",
                      {
                        "Ref": "AWS::Region"
                      },
                      "\n",
                      "sqsqueue = ",
                      {
                        "Fn::GetAtt": [
                          "SQS",
                          "QueueName"
                        ]
                      },
                      "\n",
                      "table_name = ",
                      {
                        "Ref": "DynamoDBTable"
                      },
                      "\n",
                      "scheduler = ",
                      {
                        "Fn::FindInMap": [
                          "MyConfig",
                          "Scheduler",
                          "Default"
                        ]
                      },
                      "\n",
                      "cluster_user = ",
                      {
                        "Fn::FindInMap": [
                          "ClusterUser",
                          {
                            "Fn::FindInMap": [
                              "MyConfig",
                              "BaseOS",
                              "Default"
                            ]
                          },
                          "User"
                        ]
                      },
                      "\n"
                    ]
                  ]
                },
                "mode": "000644",
                "owner": "root",
                "group": "root"
              },
              "/etc/cfncluster/cfncluster_supervisord.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[program:sqswatcher]\n",
                      "command = /usr/bin/sqswatcher\n"
                    ]
                  ]
                },
                "mode": "000644",
                "owner": "root",
                "group": "root"
              }
            }
          },
          "runBootAsMaster": {
            "commands": {
              "bootasmaster": {
                "command": "/opt/cfncluster/scripts/boot_as_master"
              }
            }
          }
        }
      },
      "CreationPolicy": {
        "ResourceSignal": {
          "Count": "1",
          "Timeout": "PT30M"
        }
      }
    },
    "ComputeFleet": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "DependsOn": "MasterServer",
      "Properties": {
        "MaxSize": {
          "Fn::FindInMap": [
            "MyConfig",
            "MaxQueueSize",
            "Default"
          ]
        },
        "VPCZoneIdentifier": [
          {
            "Fn::If": [
              "UseMasterSubnetForCompute",
              {
                "Ref": "MasterSubnetId"
              },
              {
                "Fn::FindInMap": [
                  "MyConfig",
                  "ComputeSubnetId",
                  "Default"
                ]
              }
            ]
          }
        ],
        "LaunchConfigurationName": {
          "Ref": "ComputeServerLaunchConfig"
        },
        "MinSize": {
          "Fn::If": [
            "MaintainInitialASGSize",
            {
              "Fn::FindInMap": [
                "MyConfig",
                "InitialQueueSize",
                "Default"
              ]
            },
            "0"
          ]
        },
        "DesiredCapacity": {
          "Fn::FindInMap": [
            "MyConfig",
            "InitialQueueSize",
            "Default"
          ]
        },
        "NotificationConfiguration": {
          "TopicARN": {
            "Ref": "SNS"
          },
          "NotificationTypes": [
            "autoscaling:EC2_INSTANCE_TERMINATE"
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "Compute",
            "PropagateAtLaunch": "true"
          }
        ],
        "PlacementGroup": {
          "Fn::If": [
            "UsePlacementGroup",
            {
              "Fn::FindInMap": [
                "MyConfig",
                "PlacementGroup",
                "Default"
              ]
            },
            {
              "Ref": "AWS::NoValue"
            }
          ]
        }
      },
      "CreationPolicy": {
        "ResourceSignal": {
          "Timeout": "PT30M",
          "Count": {
            "Fn::FindInMap": [
              "MyConfig",
              "ComputeWaitConditionCount",
              "Default"
            ]
          }
        }
      }
    },
    "ComputeServerLaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "DependsOn": [
        "RootRole"
      ],
      "Properties": {
        "SecurityGroups": [
          {
            "Ref": "ComputeSecurityGroup"
          },
          {
            "Fn::If": [
              "AddAdditionalSG",
              {
                "Fn::FindInMap": [
                  "MyConfig",
                  "AdditionalSG",
                  "Default"
                ]
              },
              {
                "Ref": "AWS::NoValue"
              }
            ]
          }
        ],
        "AssociatePublicIpAddress": {
          "Fn::If": [
            "ComputePublicIps",
            "true",
            "false"
          ]
        },
        "InstanceType": {
          "Fn::FindInMap": [
            "MyConfig",
            "ComputeInstanceType",
            "Default"
          ]
        },
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvdba",
            "VirtualName": "ephemeral0"
          },
          {
            "DeviceName": "/dev/xvdbb",
            "VirtualName": "ephemeral1"
          },
          {
            "DeviceName": "/dev/xvdbc",
            "VirtualName": "ephemeral2"
          },
          {
            "DeviceName": "/dev/xvdbd",
            "VirtualName": "ephemeral3"
          },
          {
            "DeviceName": "/dev/xvdbe",
            "VirtualName": "ephemeral4"
          },
          {
            "DeviceName": "/dev/xvdbf",
            "VirtualName": "ephemeral5"
          },
          {
            "DeviceName": "/dev/xvdbg",
            "VirtualName": "ephemeral6"
          },
          {
            "DeviceName": "/dev/xvdbh",
            "VirtualName": "ephemeral7"
          },
          {
            "DeviceName": "/dev/xvdbi",
            "VirtualName": "ephemeral8"
          },
          {
            "DeviceName": "/dev/xvdbj",
            "VirtualName": "ephemeral9"
          },
          {
            "DeviceName": "/dev/xvdbk",
            "VirtualName": "ephemeral10"
          },
          {
            "DeviceName": "/dev/xvdbl",
            "VirtualName": "ephemeral11"
          },
          {
            "DeviceName": "/dev/xvdbm",
            "VirtualName": "ephemeral12"
          },
          {
            "DeviceName": "/dev/xvdbn",
            "VirtualName": "ephemeral13"
          },
          {
            "DeviceName": "/dev/xvdbo",
            "VirtualName": "ephemeral14"
          },
          {
            "DeviceName": "/dev/xvdbp",
            "VirtualName": "ephemeral15"
          },
          {
            "DeviceName": "/dev/xvdbq",
            "VirtualName": "ephemeral16"
          },
          {
            "DeviceName": "/dev/xvdbr",
            "VirtualName": "ephemeral17"
          },
          {
            "DeviceName": "/dev/xvdbs",
            "VirtualName": "ephemeral18"
          },
          {
            "DeviceName": "/dev/xvdbt",
            "VirtualName": "ephemeral19"
          },
          {
            "DeviceName": "/dev/xvdbu",
            "VirtualName": "ephemeral20"
          },
          {
            "DeviceName": "/dev/xvdbv",
            "VirtualName": "ephemeral21"
          },
          {
            "DeviceName": "/dev/xvdbw",
            "VirtualName": "ephemeral22"
          },
          {
            "DeviceName": "/dev/xvdbx",
            "VirtualName": "ephemeral23"
          }
        ],
        "KeyName": {
          "Ref": "KeyName"
        },
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash\n",
                "function error_exit\n",
                "{\n",
                "  cfn-signal ${proxy_args} --exit-code=1 --reason=\"$1\" --stack=",
                {
                  "Ref": "AWS::StackName"
                },
                " --resource=ComputeFleet --region=",
                {
                  "Ref": "AWS::Region"
                },
                "\n",
                "  exit 1\n",
                "}\n",
                "proxy=",
                {
                  "Fn::FindInMap": [
                    "MyConfig",
                    "ProxyServer",
                    "Default"
                  ]
                },
                "\n",
                "if [ \"$proxy\" != \"NONE\" ]; then\n",
                "  proxy_args=\"--http-proxy=${proxy} --https-proxy=${proxy}\"\n",
                "  proxy_host=$(echo \"$proxy\" | awk -F/ '{print $3}' | cut -d: -f1)\n",
                "  proxy_port=$(echo \"$proxy\" | awk -F/ '{print $3}' | cut -d: -f2)\n",
                "  echo -e \"[Boto]\nproxy = ${proxy_host}\nproxy_port = ${proxy_port}\n\" >/etc/boto.cfg\n",
                "else\n",
                "  proxy_args=\"\"\n",
                "fi\n",
                "cfn-init ${proxy_args} -v -s ",
                {
                  "Ref": "AWS::StackName"
                },
                " -c default -r ComputeServerLaunchConfig ",
                "         --region ",
                {
                  "Ref": "AWS::Region"
                },
                " || error_exit 'Failed to run cfn-init'\n",
                "cfn_cwl=",
                {
                  "Fn::If": [
                    "CloudWatchLogs",
                    "true",
                    "false"
                  ]
                },
                "\n",
                "if [ \"$cfn_cwl\" == \"true\" ]; then\n",
                "# Setup CloudWatch Logs agent\n",
                "python /root/awslogs-agent-setup.py -n -r ",
                {
                  "Fn::FindInMap": [
                    "MyConfig",
                    "CWLRegion",
                    "Default"
                  ]
                },
                " -c /tmp/cwlogs/cfn-logs.conf || error_exit 'Failed to run CloudWatch Logs agent setup'\n",
                "fi\n",
                "cfn-signal ${proxy_args} --exit-code=0 --reason=\"Compute setup complete\" --stack=",
                {
                  "Ref": "AWS::StackName"
                },
                " --resource=ComputeFleet --region=",
                {
                  "Ref": "AWS::Region"
                },
                "\n"
              ]
            ]
          }
        },
        "IamInstanceProfile": {
          "Ref": "RootInstanceProfile"
        },
        "SpotPrice": {
          "Fn::If": [
            "UseSpotInstances",
            {
              "Ref": "SpotPrice"
            },
            {
              "Ref": "AWS::NoValue"
            }
          ]
        },
        "ImageId": {
          "Fn::If": [
            "UseCustomAMI",
            {
              "Fn::FindInMap": [
                "MyConfig",
                "CustomAMI",
                "Default"
              ]
            },
            {
              "Fn::FindInMap": [
                "AWSRegionOS2AMI",
                {
                  "Ref": "AWS::Region"
                },
                {
                  "Fn::FindInMap": [
                    "MyConfig",
                    "BaseOS",
                    "Default"
                  ]
                }
              ]
            }
          ]
        },
        "InstanceMonitoring": "false",
        "PlacementTenancy": {
          "Fn::If": [
            "UseDedicatedTenancy",
            {
              "Fn::FindInMap": [
                "MyConfig",
                "Tenancy",
                "Default"
              ]
            },
            {
              "Ref": "AWS::NoValue"
            }
          ]
        }
      },
      "Metadata": {
        "Comment": "cfncluster Compute server",
        "AWS::CloudFormation::Init": {
          "configSets": {
            "default": [
              "deployConfigFiles",
              "runBootAsCompute"
            ]
          },
          "deployConfigFiles": {
            "files": {
              "/opt/cfncluster/cfnconfig": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "cfn_scheduler=",
                      {
                        "Fn::FindInMap": [
                          "MyConfig",
                          "Scheduler",
                          "Default"
                        ]
                      },
                      "\n",
                      "cfn_region=",
                      {
                        "Ref": "AWS::Region"
                      },
                      "\n",
                      "cfn_preinstall=",
                      {
                        "Fn::FindInMap": [
                          "MyConfig",
                          "PreInstallScript",
                          "Default"
                        ]
                      },
                      "\n",
                      "cfn_preinstall_args=\"",
                      {
                        "Fn::FindInMap": [
                          "MyConfig",
                          "PreInstallArgs",
                          "Default"
                        ]
                      },
                      "\"\n",
                      "cfn_postinstall=",
                      {
                        "Fn::FindInMap": [
                          "MyConfig",
                          "PostInstallScript",
                          "Default"
                        ]
                      },
                      "\n",
                      "cfn_postinstall_args=\"",
                      {
                        "Fn::FindInMap": [
                          "MyConfig",
                          "PostInstallArgs",
                          "Default"
                        ]
                      },
                      "\"\n",
                      "cfn_sqs_url=",
                      {
                        "Ref": "SQS"
                      },
                      "\n",
                      "cfn_proxy=",
                      {
                        "Fn::FindInMap": [
                          "MyConfig",
                          "ProxyServer",
                          "Default"
                        ]
                      },
                      "\n",
                      "cfn_master=",
                      {
                        "Fn::GetAtt": [
                          "MasterServer",
                          "PrivateDnsName"
                        ]
                      },
                      "\n",
                      "cfn_node_type=ComputeFleet\n",
                      "cfn_ephemeral_dir=",
                      {
                        "Fn::FindInMap": [
                          "MyConfig",
                          "EphemeralDir",
                          "Default"
                        ]
                      },
                      "\n",
                      "cfn_shared_dir=",
                      {
                        "Fn::FindInMap": [
                          "MyConfig",
                          "SharedDir",
                          "Default"
                        ]
                      },
                      "\n",
                      "cfn_encrypted_ephemeral=",
                      {
                        "Fn::FindInMap": [
                          "MyConfig",
                          "EncryptedEphemeral",
                          "Default"
                        ]
                      },
                      "\n",
                      "cfn_cluster_user=",
                      {
                        "Fn::FindInMap": [
                          "ClusterUser",
                          {
                            "Fn::FindInMap": [
                              "MyConfig",
                              "BaseOS",
                              "Default"
                            ]
                          },
                          "User"
                        ]
                      },
                      "\n"
                    ]
                  ]
                },
                "mode": "000644",
                "owner": "root",
                "group": "root"
              },
              "/etc/nodewatcher.cfg": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[nodewatcher]\n",
                      "region = ",
                      {
                        "Ref": "AWS::Region"
                      },
                      "\n",
                      "scheduler = ",
                      {
                        "Fn::FindInMap": [
                          "MyConfig",
                          "Scheduler",
                          "Default"
                        ]
                      },
                      "\n"
                    ]
                  ]
                },
                "mode": "000644",
                "owner": "root",
                "group": "root"
              },
              "/etc/cfncluster/cfncluster_supervisord.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[program:nodewatcher]\n",
                      "command = /usr/bin/nodewatcher\n"
                    ]
                  ]
                },
                "mode": "000644",
                "owner": "root",
                "group": "root"
              },
              "/tmp/cwlogs/cfn-logs.conf": {
                "content": {
                  "Fn::If": [
                    "CloudWatchLogs",
                    {
                      "Fn::Join": [
                        "",
                        [
                          "[general]\n",
                          "state_file= /var/awslogs/agent-state\n",
                          "[/var/log/cloud-init.log]\n",
                          "file = /var/log/cloud-init.log\n",
                          "log_group_name = ",
                          {
                            "Fn::FindInMap": [
                              "MyConfig",
                              "CWLLogGroup",
                              "Default"
                            ]
                          },
                          "\n",
                          "log_stream_name = {instance_id}/cloud-init.log\n",
                          "datetime_format = %d/%b/%Y:%H:%M:%S\n",
                          "[/var/log/cloud-init-output.log]\n",
                          "file = /var/log/cloud-init-output.log\n",
                          "log_group_name = ",
                          {
                            "Fn::FindInMap": [
                              "MyConfig",
                              "CWLLogGroup",
                              "Default"
                            ]
                          },
                          "\n",
                          "log_stream_name = {instance_id}/cloud-init-output.log\n",
                          "datetime_format = %d/%b/%Y:%H:%M:%S\n",
                          "[/var/log/cfn-init.log]\n",
                          "file = /var/log/cfn-init.log\n",
                          "log_group_name = ",
                          {
                            "Fn::FindInMap": [
                              "MyConfig",
                              "CWLLogGroup",
                              "Default"
                            ]
                          },
                          "\n",
                          "log_stream_name = {instance_id}/cfn-init.log\n",
                          "datetime_format = %d/%b/%Y:%H:%M:%S\n",
                          "[/var/log/cfn-wire.log]\n",
                          "file = /var/log/cfn-wire.log\n",
                          "log_group_name = ",
                          {
                            "Fn::FindInMap": [
                              "MyConfig",
                              "CWLLogGroup",
                              "Default"
                            ]
                          },
                          "\n",
                          "log_stream_name = {instance_id}/cfn-wire.log\n",
                          "datetime_format = %d/%b/%Y:%H:%M:%S\n"
                        ]
                      ]
                    },
                    "\n"
                  ]
                },
                "mode": "000444",
                "owner": "root",
                "group": "root"
              }
            }
          },
          "runBootAsCompute": {
            "commands": {
              "bootascompute": {
                "command": "/opt/cfncluster/scripts/boot_as_compute"
              }
            }
          }
        }
      }
    },
    "ScaleUpPolicy2": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "DependsOn": [
        "RootRole"
      ],
      "Properties": {
        "Cooldown": {
          "Fn::FindInMap": [
            "MyConfig",
            "ScalingCooldown",
            "Default"
          ]
        },
        "ScalingAdjustment": {
          "Fn::FindInMap": [
            "MyConfig",
            "ScalingAdjustment2",
            "Default"
          ]
        },
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": {
          "Ref": "ComputeFleet"
        }
      }
    },
    "AddCapacityAlarm2": {
      "Type": "AWS::CloudWatch::Alarm",
      "DependsOn": [
        "RootRole"
      ],
      "Properties": {
        "Threshold": {
          "Fn::FindInMap": [
            "MyConfig",
            "ScalingThreshold2",
            "Default"
          ]
        },
        "Period": {
          "Fn::FindInMap": [
            "MyConfig",
            "ScalingPeriod",
            "Default"
          ]
        },
        "EvaluationPeriods": {
          "Fn::FindInMap": [
            "MyConfig",
            "ScalingEvaluationPeriods",
            "Default"
          ]
        },
        "Statistic": "Sum",
        "AlarmActions": [
          {
            "Ref": "ScaleUpPolicy2"
          }
        ],
        "Namespace": "cfncluster",
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "Dimensions": [
          {
            "Name": "Stack",
            "Value": {
              "Ref": "AWS::StackName"
            }
          }
        ],
        "MetricName": "pending"
      }
    },
    "ScaleUpPolicy": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "DependsOn": [
        "RootRole"
      ],
      "Properties": {
        "Cooldown": {
          "Fn::FindInMap": [
            "MyConfig",
            "ScalingCooldown",
            "Default"
          ]
        },
        "ScalingAdjustment": {
          "Fn::FindInMap": [
            "MyConfig",
            "ScalingAdjustment",
            "Default"
          ]
        },
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": {
          "Ref": "ComputeFleet"
        }
      }
    },
    "AddCapacityAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "DependsOn": [
        "RootRole"
      ],
      "Properties": {
        "Threshold": {
          "Fn::FindInMap": [
            "MyConfig",
            "ScalingThreshold",
            "Default"
          ]
        },
        "Period": {
          "Fn::FindInMap": [
            "MyConfig",
            "ScalingPeriod",
            "Default"
          ]
        },
        "EvaluationPeriods": {
          "Fn::FindInMap": [
            "MyConfig",
            "ScalingEvaluationPeriods",
            "Default"
          ]
        },
        "Statistic": "Average",
        "AlarmActions": [
          {
            "Ref": "ScaleUpPolicy"
          }
        ],
        "Namespace": "cfncluster",
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "Dimensions": [
          {
            "Name": "Stack",
            "Value": {
              "Ref": "AWS::StackName"
            }
          }
        ],
        "MetricName": "pending"
      }
    },
    "MasterSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "DependsOn": [
        "RootRole"
      ],
      "Properties": {
        "GroupDescription": "Enable access to the Master host",
        "VpcId": {
          "Fn::GetAtt": [
            "SubnetInfo",
            "VpcId"
          ]
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": {
              "Fn::FindInMap": [
                "MyConfig",
                "SSHFrom",
                "Default"
              ]
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "MasterSecurityGroupIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "DependsOn": [
        "RootRole"
      ],
      "Properties": {
        "IpProtocol": "-1",
        "FromPort": "0",
        "ToPort": "65535",
        "SourceSecurityGroupId": {
          "Ref": "ComputeSecurityGroup"
        },
        "GroupId": {
          "Ref": "MasterSecurityGroup"
        }
      }
    },
    "ComputeSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "DependsOn": [
        "RootRole"
      ],
      "Properties": {
        "GroupDescription": "Allow access to resources in subnets behind front",
        "VpcId": {
          "Fn::GetAtt": [
            "SubnetInfo",
            "VpcId"
          ]
        },
        "SecurityGroupIngress": [
          {
            "SourceSecurityGroupId": {
              "Ref": "MasterSecurityGroup"
            },
            "IpProtocol": "-1",
            "FromPort": "0",
            "ToPort": "65535"
          }
        ]
      }
    },
    "ComputeSecurityGroupIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "DependsOn": [
        "RootRole"
      ],
      "Properties": {
        "IpProtocol": "-1",
        "FromPort": "0",
        "ToPort": "65535",
        "SourceSecurityGroupId": {
          "Ref": "ComputeSecurityGroup"
        },
        "GroupId": {
          "Ref": "ComputeSecurityGroup"
        }
      }
    },
    "MasterENI": {
      "Type": "AWS::EC2::NetworkInterface",
      "DependsOn": [
        "RootRole"
      ],
      "Properties": {
        "Description": "cfncluster Master Server",
        "SubnetId": {
          "Ref": "MasterSubnetId"
        },
        "SourceDestCheck": "false",
        "GroupSet": [
          {
            "Ref": "MasterSecurityGroup"
          },
          {
            "Fn::If": [
              "AddAdditionalSG",
              {
                "Fn::FindInMap": [
                  "MyConfig",
                  "AdditionalSG",
                  "Default"
                ]
              },
              {
                "Ref": "AWS::NoValue"
              }
            ]
          }
        ]
      }
    },
    "SharedVolume": {
      "Type": "AWS::EC2::Volume",
      "DependsOn": [
        "RootRole"
      ],
      "Properties": {
        "AvailabilityZone": {
          "Fn::GetAtt": [
            "SubnetInfo",
            "AvailabilityZone"
          ]
        },
        "VolumeType": {
          "Fn::FindInMap": [
            "MyConfig",
            "VolumeType",
            "Default"
          ]
        },
        "Size": {
          "Fn::If": [
            "UseEBSSnapshot",
            {
              "Ref": "AWS::NoValue"
            },
            {
              "Fn::FindInMap": [
                "MyConfig",
                "VolumeSize",
                "Default"
              ]
            }
          ]
        },
        "SnapshotId": {
          "Fn::If": [
            "UseEBSSnapshot",
            {
              "Fn::FindInMap": [
                "AWSRegion2Snapshot",
                {
                  "Ref": "AWS::Region"
                },
                "Default"
              ]
            },
            {
              "Ref": "AWS::NoValue"
            }
          ]
        },
        "Iops": {
          "Fn::If": [
            "UseEBSPIOPS",
            {
              "Fn::FindInMap": [
                "MyConfig",
                "VolumeIOPS",
                "Default"
              ]
            },
            {
              "Ref": "AWS::NoValue"
            }
          ]
        },
        "Encrypted": {
          "Fn::If": [
            "UseEBSEncryption",
            {
              "Fn::FindInMap": [
                "MyConfig",
                "EBSEncryption",
                "Default"
              ]
            },
            {
              "Ref": "AWS::NoValue"
            }
          ]
        },
        "KmsKeyId": {
          "Fn::If": [
            "UseEBSKMSKey",
            {
              "Fn::FindInMap": [
                "MyConfig",
                "EBSKMSKeyId",
                "Default"
              ]
            },
            {
              "Ref": "AWS::NoValue"
            }
          ]
        }
      }
    },
    "AssosiateEIP": {
      "Type": "AWS::EC2::EIPAssociation",
      "DependsOn": [
        "RootRole"
      ],
      "Properties": {
        "AllocationId": {
          "Fn::GetAtt": [
            "MasterEIP",
            "AllocationId"
          ]
        },
        "NetworkInterfaceId": {
          "Ref": "MasterENI"
        }
      },
      "Condition": "MasterPublicIp"
    }
  },
  "Outputs": {
    "MasterPrivateIP": {
      "Description": "Private IP Address of the Master host",
      "Value": {
        "Fn::GetAtt": [
          "MasterServer",
          "PrivateIp"
        ]
      }
    },
    "MasterPublicIP": {
      "Description": "Public IP Address of the Master host",
      "Value": {
        "Fn::GetAtt": [
          "MasterServer",
          "PublicIp"
        ]
      },
      "Condition": "MasterPublicIp"
    },
    "MasterPrivateDNSName": {
      "Description": "Private Hostname of the Master host",
      "Value": {
        "Fn::GetAtt": [
          "MasterServer",
          "PrivateDnsName"
        ]
      }
    },
    "MasterPublicDNSName": {
      "Description": "Public DNS Name of the Master host",
      "Value": {
        "Fn::GetAtt": [
          "MasterServer",
          "PublicDnsName"
        ]
      },
      "Condition": "MasterPublicIp"
    },
    "GangliaPrivateURL": {
      "Description": "Private URL to access Ganglia",
      "Value": {
        "Fn::Join": [
          "",
          [
            "http://",
            {
              "Fn::GetAtt": [
                "MasterServer",
                "PrivateIp"
              ]
            },
            "/ganglia/"
          ]
        ]
      }
    },
    "GangliaPublicURL": {
      "Description": "Public URL to access Ganglia",
      "Value": {
        "Fn::Join": [
          "",
          [
            "http://",
            {
              "Fn::GetAtt": [
                "MasterServer",
                "PublicIp"
              ]
            },
            "/ganglia/"
          ]
        ]
      },
      "Condition": "MasterPublicIp"
    }
  }
}