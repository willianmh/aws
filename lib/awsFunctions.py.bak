import boto3

# *********************************************************
# List EC2 instances
# *********************************************************


def listInstances(owner, name):
    ec2 = boto3.resource('ec2')

    return list(ec2.instances.filter(
        Filters=[
            {'Name': 'tag:Owner', 'Values': [owner]},
            {'Name': 'tag:Name', 'Values': [name]}
            ]))

# *********************************************************
# List EBS volumes
# *********************************************************


def getVolume(owner, name):
    ec2 = boto3.resource('ec2')

    return list(ec2.volumes.filter(
        Filters=[
            {'Name': 'tag:Owner', 'Values': [owner]},
            {'Name': 'tag:Name', 'Values': [name]}
            ]))

# *********************************************************
# Create EBS
# *********************************************************


def createVolume(owner, name, AZ='us-east-1a', snap="snap-145ee46b"):
    client = boto3.client('ec2')

    response = client.create_volume(
        AvailabilityZone=AZ,
        Encrypted=False,
        Size=500,
        SnapshotId=snap,
        VolumeType='st1',
        TagSpecifications=[
            {
                'ResourceType': 'volume',
                'Tags': [
                    {
                        'Key': 'Name',
                        'Value': name
                    },
                    {
                        'Key': 'Owner',
                        'Value': owner
                    }
                ]
            },
        ]
    )
    return response['VolumeId']

# *********************************************************
# Start EC2 instances
# *********************************************************


def startInstance(owner, namez):
    client = boto3.client('ec2')
    # get <owner>'s instances with Name <name>
    instances = listInstances(owner, name)
    if len(instances) > 0:
        instance = instances[0]
        if instance.state["Name"] == "stopped":
            response = client.start_instances(
                InstanceIds=[instance.id]
            )
            waiter = client.get_waiter('instance_running')
            waiter.wait(
                InstanceIds=[instance.id]
            )
            print("intances are running")

            return instance
    return None

# *********************************************************
# Stop EC2 instances
# *********************************************************


def stopInstance(owner, name, instance_type='t2.micro'):
    client = boto3.client('ec2')

    success = False
    instances = listInstances(owner, name)
    if len(instances) > 0:
        instance = instances[0]
        if instance.state["Name"] == "running":
            response = client.stop_instances(
                InstanceIds=[instance.id]
            )
            waiter = client.get_waiter('instance_stopped')
            waiter.wait(
                InstanceIds=[instance.id]
            )
            print("intances are stopped")
            success = True
    return success

# *********************************************************
# Prepare enviroment
# *********************************************************


def attachVolume(owner, name, instance_id):
    client = boto3.client('ec2')

    volumes = getVolume(owner, name)
    if len(volumes) > 0:
        volume = volumes[0]
        if volume.state == "available":
            response = volume.attach_to_instance(
                Device='/dev/sdb',
                InstanceId=instance_id,
                )
            return volume
    return None

# *********************************************************
# Prepare enviroment
# *********************************************************


def startVisualization(owner, name):
    instance = startInstance(owner, name+"visualization")

    if instance:
        if attachVolume(owner, name+"-ebs", instance.id):
            print("Instance %s is running and attached to volume %s." % (instance.id, volumes.id))
            print("Connect to instance with the following IP:")
            print(instance.)

# *********************************************************
# Prepare enviroment
# *********************************************************


# def prepareEnv(owner, name, mode, volume_id):
#
#     gpu = "c5.large"
#     cpu = "m5.large"
#
#     if mode == "process":
#         instance_id = startInstance(owner, name+"-compute", instance_type=gpu)
#     elif mode == "visualization":
#         instance_id = startInstance(owner, name+"-visualization", instance_type=cpu)
#     else
#         print("error")
#         return
#
#     attachVolume(owner, name+"-ebs", instance_id)
